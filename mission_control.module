<?php

/**
 * @file
 * Module definition file for mission control.
 */

/**
 * Implements hook_boot().
 */
function mission_control_boot() {
  @include_once DRUPAL_ROOT . '/includes/database/log.inc';
  Database::startLog('mission_control_queries');
}

/**
 * Implements hook_menu().
 */
function mission_control_menu() {
  $items = array();

  $items['admin/config/development/mission_control'] = array(
    'title' => 'Mission Control settings',
    'access arguments' => array('access mission control'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mission_control_settings'),
    'file path' => drupal_get_path('module', 'mission_control') . '/admin',
    'file' => 'mission_control.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mission_control_permission() {
  return array(
    'access mission control' => array(
      'title' => t('Access mission control'),
      'description' => t('Display the mission control bar on the page.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function mission_control_theme($existing, $type, $theme, $path) {
  return array(
    'mission_control_container' => array(
      'render element' => 'element',
      'template' => 'mission-control-container',
      'path' => drupal_get_path('module', 'mission_control') . '/theme/templates',
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function mission_control_page_alter(&$page) {
  global $_mission_control_queries;
  $_mission_control_queries = Database::getLog('mission_control_queries');

  // Don't bother continuing if it is within the Drupal administration section
  // or the user doesn't have the correct permissions.
  if (path_is_admin(current_path()) || !user_access('access mission control')) {
    return FALSE;
  }

  $page['page_bottom']['mission_control'] = array(
    '#theme' => 'mission_control_container',
    // Feature flags.
    'enable_git_data' => variable_get('mission_control_enable_git_data'),
    'rendered_git_data' => mission_control_render_git_data(variable_get('mission_control_git_path')),
    'show_hostname' => variable_get('mission_control_show_hostname'),
    'host_data' => mission_control_output_host_data(),
    'enable_render_time' => variable_get('mission_control_enable_render_time'),
    'use_fqdn_hostname' => variable_get('mission_control_use_fqdn_hostname'),
    'full_git_path' => variable_get('mission_control_git_path'),
    'enable_caching_output' => variable_get('mission_control_enable_caching_output'),
    'enable_sql_output' => variable_get('mission_control_enable_sql_output'),
    'enable_directory_sizes' => variable_get('mission_control_enable_directory_sizes'),
    'enable_background_task' => variable_get('mission_control_enable_background_task'),
    'enable_batch_count' => variable_get('mission_control_enable_batch_count'),
    'enable_queue_count' => variable_get('mission_control_enable_queue_count'),
    'queue_names' => misssion_control_get_queue_names(),
    // Stats.
    'hostname' => (variable_get('mission_control_use_fqdn_hostname')) ? mission_control_get_hostname(TRUE) : mission_control_get_hostname(),
    'render_time' => mission_control_get_page_render_time(),
    'cache_count' => mission_control_get_cache_count(),
    'cache_count_output' => mission_control_get_cache_output(),
    'sql_call_count' => mission_control_get_query_count(),
    'sql_call_time' => mission_control_get_query_call_time(),
    'sql_group_breakdown' => mission_control_get_sql_group_breakdown(),
    'sql_query_breakdown_table' => mission_control_rendered_sql_query_breakdown_table(),
    'css_directory_size' => mission_control_get_directory_size('css'),
    'js_directory_size' => mission_control_get_directory_size('js'),
    'batch_count' => mission_control_get_active_batch_count(),
    'queue_count' => mission_control_get_active_queue_count(),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'mission_control') . '/theme/css/mission_control.css',
        drupal_get_path('module', 'mission_control') . '/theme/css/tipsy.css',
      ),
      'js' => array(
        drupal_get_path('module', 'mission_control') . '/theme/js/mission_control.js',
        drupal_get_path('module', 'mission_control') . '/theme/js/tipsy.js',
        drupal_get_path('module', 'mission_control') . '/theme/js/modal.js',
      ),
    ),
  );
}

/**
 * Get the current page render time.
 *
 * @return int
 *   The page render time rounded to the nearest whole integer.
 */
function mission_control_get_page_render_time() {
  if (!variable_get('mission_control_enable_render_time')) {
    return FALSE;
  }

  return round(timer_read('page'));
}

/**
 * Build the output for the git displayed data.
 *
 * @return string
 *   A string containing the built markup.
 */
function mission_control_render_git_data($path) {
  $current_branch = mission_control_get_current_branch($path);
  $sha = mission_control_get_head_sha($path);
  $output = '';

  if (!empty($current_branch)) {
    $output .= $current_branch;
  }

  if (!empty($current_branch) && !empty($sha)) {
    $output .= ' @ ';
  }

  if (!empty($sha)) {
    $output .= $sha;
  }

  return $output;
}

/**
 * Get the current git branch.
 *
 * @return string
 *   Name of the branch it is currently in use.
 */
function mission_control_get_current_branch($path) {
  if (!variable_get('mission_control_enable_git_data')) {
    return FALSE;
  }

  return exec("cd $path; git rev-parse --abbrev-ref HEAD");
}

/**
 * Get the current HEAD SHA.
 *
 * @return string
 *   String of the HEAD SHA trimmmed to 7 characters.
 */
function mission_control_get_head_sha($path) {
  if (!variable_get('mission_control_enable_git_data')) {
    return FALSE;
  }

  return substr(exec("cd $path; git rev-parse HEAD"), 0, 7);
}

/**
 * Get the hostname of the machine the code is running on.
 *
 * @param bool $use_fqdn
 *   Whether to trim the current hostname to the first period.
 *
 * @return string
 *   The name of the current machine. If $use_fqdn is FALSE, the hostname will
 *   be trimmed to the first period. Example, web-123.subdomain.com will become
 *   web-123.
 */
function mission_control_get_hostname($use_fqdn = FALSE) {
  if (!variable_get('mission_control_show_hostname')) {
    return FALSE;
  }

  return ($use_fqdn) ? gethostname() : strstr(gethostname(), '.', TRUE);
}

/**
 * Output the tite data for the host tooltip.
 *
 * @return string
 *   The string with all the server information inside of it.
 */
function mission_control_output_host_data() {
  if (!variable_get('mission_control_show_hostname')) {
    return FALSE;
  }

  global $databases;

  $database_host = $databases['default']['default']['host'];
  $database_name = $databases['default']['default']['database'];

  $output = "<b>IP:</b> " . $_SERVER['SERVER_ADDR'];
  $output .= "<b><br>Hostname:</b> " . mission_control_get_hostname();
  $output .= "<b><br>Database:</b> $database_name ($database_host)";

  return $output;
}

/**
 * Get a count of all queries being run on load.
 *
 * @return int
 *   Number of queries being run on the load.
 */
function mission_control_get_query_count() {
  if (!variable_get('mission_control_enable_sql_output')) {
    return FALSE;
  }

  global $_mission_control_queries;
  return count($_mission_control_queries);
}

/**
 * Get the total query call time for all queries.
 *
 * @return int
 *   The call time for all queries for a page load.
 */
function mission_control_get_query_call_time() {
  if (!variable_get('mission_control_enable_sql_output')) {
    return FALSE;
  }

  global $_mission_control_queries;
  $total_call_time = 0;

  // Get each query call time and add it into the total time.
  foreach ($_mission_control_queries as $query) {
    $total_call_time += round($query['time'], 5);
  }

  return round($total_call_time * 1000, 2);
}

/**
 * Get a collated list of the SQL callers.
 *
 * This method gets access to all queries and groups by the caller (that can
 * be the method or the class::method combination).
 *
 * @return string
 *   Returns a string which contains the HTML markup to format the tip hover.
 */
function mission_control_get_sql_group_breakdown() {
  if (!variable_get('mission_control_enable_sql_output')) {
    return FALSE;
  }

  global $_mission_control_queries;
  $groups = array();
  $output = array();

  foreach ($_mission_control_queries as $query) {
    $caller = (isset($query['caller']['function'])) ? $query['caller']['function'] : NULL;
    $class = (isset($query['caller']['class'])) ? $query['caller']['class'] : NULL;

    // Should a class be making the call, let's prepend it so that we can the
    // full picture.
    if (!is_null($class) && !is_null($caller)) {
      $name = "{$class}::$caller";
    }
    else {
      $name = $caller;
    }

    if (isset($groups[$name])) {
      $groups[$name]++;
    }
    else {
      $groups[$name] = 1;
    }
  }

  // This goes into an array so that we can nicely output the HTML. PHP's
  // implode is smart enough to put the 'glue' between the values so we don't
  // end up with additional line breaks.
  foreach ($groups as $group => $group_count) {
    $output[] = "<b>$group</b> - $group_count";
  }

  return implode('<br>', $output);
}

/**
 * Output a breakdown of the SQL commands for a request.
 */
function mission_control_rendered_sql_query_breakdown_table() {
  if (!variable_get('mission_control_enable_sql_output')) {
    return FALSE;
  }

  global $_mission_control_queries;
  $output = '<table>';

  foreach ($_mission_control_queries as $query) {
    if (!empty($query['caller']['class'])) {
      $caller = $query['caller']['class'] . '::' . $query['caller']['function'];
    }
    else {
      $caller = $query['caller']['function'];
    }

    // Apply some formatting rules should the query time be over the desired
    // 'slow query' threshold.
    $query_time = round(round($query['time'], 5) * 1000, 2);
    $slow_sql_threshold = variable_get('mission_control_slow_sql_threshold');
    if ($query_time > $slow_sql_threshold && $slow_sql_threshold !== '0') {
      $query_time = '<span class="mission-control-slow-query">' . $query_time . 'ms</span>';
    }
    else {
      $query_time = $query_time . 'ms';
    }

    // Most of the time, we are only interested in the actual values being
    // queried on so let's swap them out for the placeholders.
    $query_replaced = strtr($query['query'], $query['args']);
    $output .= '<tr>';
    $output .= '<td width="50">' . $query_time . '</td>';
    $output .= '<td width="260">' . $caller . '</td>';
    $output .= '<td>' . $query_replaced . '</td>';
  }

  $output .= '</table>';

  return $output;
}

/**
 * Get the size of the assets directory.
 *
 * @param string $type
 *   The type of directory we are wanting the size of. Defaults to 'css' but
 *   'js' is also available.
 *
 * @return string
 *   The directory size and the sizing suffix. Example, 120kb.
 */
function mission_control_get_directory_size($type = 'css') {
  if (!variable_get('mission_control_enable_directory_sizes')) {
    return FALSE;
  }

  $directory = DRUPAL_ROOT . '/' . variable_get('mission_control_file_public_path', conf_path() . '/files') . '/' . $type;
  $size = 0;

  // If the directory doesn't exist just return n/a.
  if (!is_dir($directory)) {
    return 'n/a';
  }

  // Iterate over each file in the directory.
  foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator($directory)) as $file) {
    $filetypes = array("$type");
    $filetype = pathinfo($file, PATHINFO_EXTENSION);

    // Only add the size of files that are of the same type as we are after.
    if (in_array(strtolower($filetype), $filetypes)) {
      $size += $file->getSize();
    }
  }

  $base = log($size) / log(1024);
  $suffixes = array('', 'kb', 'mb');

  // If the cached files are not found or the directory is empty, the log() eval
  // will return a negative integer. If that happens we just return 0kb instead.
  if ($base < 0) {
    return '0kb';
  }

  return round(pow(1024, $base - floor($base)), 0) . $suffixes[floor($base)];
}

/**
 * Retrieve a count of the active batch processes.
 *
 * @return int
 *   The number of batch processes currently running.
 */
function mission_control_get_active_batch_count() {
  if (!variable_get('mission_control_enable_batch_count')) {
    return FALSE;
  }

  $batch_count = db_select('batch', 'b')
    ->fields('b', array('bid'))
    ->execute()
    ->fetchAll();

  return count($batch_count);
}

/**
 * Retrieve a count of the available queues.
 *
 * @return int
 *   The number of queues currently running.
 */
function mission_control_get_active_queue_count() {
  if (!variable_get('mission_control_enable_queue_count')) {
    return FALSE;
  }

  $queue_count = db_select('queue', 'q')
    ->fields('q', array('item_id'))
    ->execute()
    ->fetchAll();

  return count($queue_count);
}

function misssion_control_get_queue_names() {
  if (!variable_get('mission_control_enable_queue_count')) {
    return FALSE;
  }

  $queue_data = '';
  $queue_names = db_select('queue', 'q')
    ->fields('q', array('name'))
    ->execute()
    ->fetchAll();

  // Only attempt to loop over the queue data should the count not be 0. If it
  // is 0, let's just show a nice message letting the user know there isn't any
  // currently running.
  if (count($queue_names) == 0) {
    $queue_data .= 'No active queues.';
  }
  else {
    foreach ($queue_names as $queue) {
      $queue_data .= "$queue->name<br />";
    }
  }

  return $queue_data;
}

/**
 * Get the time spent on SQL being retrieved from the database.
 *
 * @return int
 *   The time used on fetching cache from the database.
 */
function mission_control_get_database_cache_time() {
  if (!variable_get('mission_control_enable_caching_output')) {
    return FALSE;
  }

  global $_mission_control_queries;
  $cache_query_time = 0;

  // Go over each query that is attached to the cache class and add it to the
  // call time.
  foreach ($_mission_control_queries as $query) {
    if ($query['caller']['class'] == 'DrupalDatabaseCache') {
      $cache_query_time += round($query['time'], 5);
    }
  }

  return round($cache_query_time * 1000, 2);
}

/**
 * Get a count of the queries that were serving from cache.
 *
 * @return int
 *   The number of queries that hit the database cache.
 */
function mission_control_get_cache_count() {
  if (!variable_get('mission_control_enable_caching_output')) {
    return FALSE;
  }

  global $_mission_control_queries;
  $output = array();
  $cache_query_count = 0;

  if (module_exists('memcache')) {
    global $_memcache_statistics;
    $cache_query_count += count($_memcache_statistics);
  }

  // Loop over every query but only pull out the ones that are called via the
  // DrupalDatabaseCache. This means we are attempting to serve from the cache.
  foreach ($_mission_control_queries as $query) {
    if ($query['caller']['class'] == 'DrupalDatabaseCache') {
      $cache_query_count++;
    }
  }

  return $cache_query_count;
}

/**
 * Output the breakdown of the cache backends.
 */
function mission_control_get_cache_output() {
  global $_mission_control_queries;
  global $_memcache_statistics;
  $cache_output = array();
  $database_cache_output = array();

  // Should the memcache module be enabled and the cache backend is actually
  // collecting data, let's presume that memcache is ready to roll.
  if (module_exists('memcache') && !empty($_memcache_statistics)) {
    $memcache_output = array();
    $memcache_bin_output = array();

    foreach ($_memcache_statistics as $mstat) {
      $type = isset($mstat[0]) ? strtoupper($mstat[0]) : '';
      $bin = isset($mstat[1]) ? $mstat[1] : '';
      $display_name = "{$type} {$bin}";

      if (!empty($memcache_bin_output[$display_name])) {
        $memcache_bin_output[$display_name]++;
      }
      else {
        $memcache_bin_output[$display_name] = 1;
      }
    }

    foreach ($memcache_bin_output as $name => $call_count) {
      $cache_output[] = "<strong>Memcache: $name</strong> - $call_count";
    }
  }

  // Database caching information.
  foreach ($_mission_control_queries as $db_cache_query) {
    if ($db_cache_query['caller']['class'] !== 'DrupalDatabaseCache') {
      continue;
    }

    switch ($db_cache_query['caller']['function']) {
      case 'getMultiple':
        $type = 'GETMULTI';
        break;

      default:
        strtoupper($type);
        break;
    }

    preg_match('/cache([A-Za-z_]?)+/', $db_cache_query['query'], $bin);
    $display_name = "{$type} {$bin[0]}";

    if (empty($database_cache_output[$display_name])) {
      $database_cache_output[$display_name] = 1;
    }
    else {
      $database_cache_output[$display_name]++;
    }
  }

  // Let's play it on the safe side here and be sure that we have something
  // before doing anything with it.
  if (!empty($database_cache_output)) {
    foreach ($database_cache_output as $name => $call_count) {
      $cache_output[] = "<strong>Database: $name</strong> - $call_count";
    }
  }

  return implode('<br />', $cache_output);
}

/**
 * A helper function to add the #states property to fields.
 *
 * @param string $parent
 *   The name of the parent item that this depends on. If it the parent
 *   within a tree, use the name that the form generates, eg path[to][parent]
 * @param string $type
 *   The type of field element to apply.
 * @param string $value
 *   The value to check for. Only used on radio buttons.
 *
 * @return array
 *   The array to add to the '#states' property of a form field to make
 *   it depend on the parent field.
 */
function mission_control_depends_on($parent, $type = 'checkbox', $value = '') {
  if ($type == 'checkbox') {
    return array(
      'visible' => array(
        ':input[name="' . $parent . '"]' => array('checked' => TRUE),
      ),
    );
  }

  if ($type == 'radio') {
    return array(
      'visible' => array(
        ':input[name="' . $parent . '"]' => array('value' => $value),
      ),
    );
  }
}
